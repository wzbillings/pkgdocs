[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pkgdocs",
    "section": "",
    "text": "This is where I record my notes on package documentation! Started with the R4DS learning community’s pkgdocs book club."
  },
  {
    "objectID": "usethis.html",
    "href": "usethis.html",
    "title": "usethis",
    "section": "",
    "text": "Configuration\n\nuse_blank_slate(): function that edits R environment settings so that the workspace is never saved. By default, this affects the entire user scope, but also has an option to affect only the project scope.\n.Rprofile helper functions open the user’s .Rprofile file, and return code that should be pasted into the file. I do not plan to use most of these because they make changes to the user-wide .Rprofile that I don’t really like, so I won’t detail further. The only one of these I plan to use is use_partial_warnings() which forces functions to issue warnings when argument names are only partial matches. Because this changes the user-level .Rprofile it will affect every session I run on a given computer.\nHelper functions to open configuration files: these are pretty self-explanatory. They also have options to only edit the files in the project scope, which is nice. There are functions for editing: .Rprofile, .Renviron, .R/Makevars, .gitconfig, .gitignore, pkgdown YAML config file, RStudio snippets file, and RStudio preferences file. I also learned that these functions will create the appropriate file if it does not exist, which is a nice feature.\n\n\n\nGit and GitHub\n\ncreate_from_github(): creates a new local project with local Git repo from a GitHub repo. Either clones a repo that you own, or forks and clones a repo that you do not have write access to (including setting up the new remote and branch correctly). Works best when GH credentials are set up correctly with other usethis functionality.\n\nThe option usethis.destdir will change the default location where these repos are cloned.\nIf you are in an RStudio session and the repo does not have a .Rproj file, this function will create one by default.\n\nuse_git(): initializes a Git repository in the current working directory, making an initial commit, and creating a sensible default .gitignore.\nGitHub Actions setup: I still don’t really know what a GitHub action is, so I might need to learn more about that before my notes here are useful.\n\n“Sets up CI for an R package that is developed using GH Actions”.\nCan run R CMD check on various OS and R versions\nCan build and deploy a pkgdown site\nCan determine test coverage\nAdds necessary config files to .Rbuildignore\nProvides the markdown code to insert a badge into the README.\n\nuse_github(): checks that the project is a valid Git repo and if so, creates an associated GH repo, adds as origin remote, pushes to GH, and sets the origin remote as the upstream remote. Also calls use_github_links().\nuse_github_file(): copies a file from a GH repo into the current project.\nThere is a set of functions to manage GH issue labels.\nuse_github_links(): sets the URL and BugReports GH fields with “appropriate links.” I don’t really know what that means so I guess I should try it out with this R project and see what happens.\nuse_github_pages(): configures GH repo settings to build and deploy a GH pages site. The default is to build from the root directory of a “gh-pages” branch. To match my normal setup, I will usually need to call use_github_pages(branch = \"main\", path = \"/docs\").\nuse_github_release(): creates a draft GH release for the package. After the draft is created, it has to be published on the GH website.\ngit_sitrep(): provides a lot of information to determine if usethis can access Git/GitHub functionality and helps to diagnose where problems might be occurring. sitrep = “Situation Report”.\ncreate_github_token(): opens the GH page where a new personal access token (PAT) can be created, with part of the information pre-filled.\ngh_token_help(): provides help with token setup if you have a common issue.\ngit_vaccinate(): adds several entries to the global .gitignore, which increases security and prevents annoying files from being pushed to the public. Needs to be run once per machine/user setup.\nuse_git_config(): helper function to edit the global or local Git config settings. I find this is often more difficult to use and error prone than manually editing the Git config, but if you do it this way, you don’t need to look at the Git docs to know what to type in the config.\nuse_git_ignore(): uses a character vector to modify the .gitignore. I probably will never use this, instead I will use edit_git_ignore_*().\ngit_protocol() shows the current default Git protocol and use_git_protocol() modifies it. I did this on a user-level to set ssh as the default so it seems I only need to do this once per user/machine setup. Need to remember to have all local .Rprofile files source the global .Rprofile file now. (Since I use renv for most projects.)\nuse_git_remote() configures a remote braench and git_remotes() shows the current remote branches. I rarely use more remotes than the GH upstream branch so probably will not use this often."
  }
]